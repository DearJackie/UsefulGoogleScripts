{"files":[{"id":"f1b7ea31-e794-44af-8b58-98db61d3d63f","name":"Description","type":"server_js","source":"\n/*************************************************************************************\nHow to publish this library?\nTo publish this library:\n1) You must at least save a version of this script: \"File\"-\u003e \"Manage Version\" -\u003e \"Save new version\"\n2) Place some descriptions in the comment of saved version\n3) When other scripts want to use this library, use the script ID below:\n\"\n1q3drhf17GyD1dR29KfacihTuiDDmOziLw8_26IJuFKqEDj_Q3n9clEeu\n\"\n\nHow to get the script ID of this library:\n1) Open the library script\n2) \"File\" -\u003e \"Project Properties\" -\u003e \"Script ID\"\n\nHow to use this library in other scripts?\n1) Open the script that want to use this library in script editor\n2) \"Resources\"-\u003e\"Libraries\"\n3) Copy the script ID of the library to the \"Add a library\"\n4) Select a version, \n5) \"Development mode\": on or off\n\n*************************************************************************************/\n"},{"id":"a048e2de-2328-407b-b2e7-1baeb0816884","name":"StringAPI","type":"server_js","source":"/*************************************************************************************\n$Description Of This Module:\nDescription:\nUtility services for strings\n\n$Revision History:\nVersion   Date          Author        Description            Location\n1.0.0     2016/12/13    CAI Huaqin    initial version\n1.0.1     2017/6/23     CAI Huaqin    keep the APIs that are common for all operations\n\n*************************************************************************************/\n\n/**\n  Construct the email address from the employee name\n  @param {string} employeeName the employee name in Valeo system, the format shall be \"FAMILYNAME Name\"\n  @return {string} the email address\n*/\nfunction StringAPI_getEmailFromEmployeeName( employeeName )\n{\n  DebugAPI_debugLog(\" --getUserEmailFromEmployeeName \" );\n  DebugAPI_debugLog( \" employeeName: \"+employeeName);\n\n  var emailAddress \u003d \"\";\n  if ( employeeName !\u003d \"\" \u0026\u0026 employeeName !\u003d null )\n  {\n    // Split the emplyee name by space\n    employeeName \u003d String( employeeName );\n    var nameStrs \u003d employeeName.split(\" \");\n    if ( nameStrs.length \u003d\u003d 2 ) // Shall be at least 2 sub strings: family name and name\n    {\n      emailAddress \u003d nameStrs[1].trim() + \".\" + nameStrs[0].trim() + \"@valeo.com\";\n    }\n    else if ( nameStrs.length \u003d\u003d 3 )\n    {\n      emailAddress \u003d nameStrs[1].trim() + nameStrs[2].trim() + \".\" + nameStrs[0].trim() + \"@valeo.com\";\n    }\n    else\n    {\n      DebugAPI_debugLog(\" WARNING: employee name sub string size not supported: \"+nameStrs.length );\n    }\n  }\n\n  emailAddress \u003d emailAddress.toLowerCase();\n  DebugAPI_debugLog( \" emailAddress: \" + emailAddress );\n  DebugAPI_debugLog(\" getUserEmailFromEmployeeName --\" );\n  \n  return emailAddress;\n}\n\n/**\n  Extract the employee name from email address\n  @param {string} theEmail the email address\n  @return {string} the employee name in the format \"FAMILYNAME Name\"\n*/\nfunction StringAPI_getEmployeeNameFromEmail( theEmail )\n{\n  var theName \u003d \"\";\n  \n  if ( theEmail !\u003d \"\" \u0026\u0026 theEmail !\u003d null )\n  {\n    theEmail \u003d String( theEmail );\n    theEmail \u003d theEmail.toUpperCase().trim();\n            \n    var nameStrs \u003d theEmail.split( \"@\" );\n    if ( nameStrs.length \u003e 0)\n    {\n      // Separate family name and name, email is name.familyname@valeo.com\n      var names \u003d String(nameStrs[0]).split( \".\" );\n      \n      theName \u003d names[1] + \" \" + names[0];\n    }\n  }\n  \n  return theName;\n}\n\n/**\n  Construct the new file name based on the template file name, replace by patter pairs.\n  @param {string} tempName The template file name\n  @param {array} patternPairArray string array. the pattern in pair: [pattern, replacement]\n  @return {string} the new file name\n*/\nfunction StringAPI_newNameByPattern( tempName, patternPairArray )\n{\n  DebugAPI_debugLog( \"template name: \"+ tempName );\n\n  var newName \u003d tempName;\n  for ( var i \u003d 0; i \u003c patternPairArray.length; i++ )\n  {\n    newName \u003d newName.replace( patternPairArray[2*i], patternPairArray[2*i+1]);\n  }\n  \n  DebugAPI_debugLog(\" new file name: \" + newName );\n  \n  return newName;\n}\n"},{"id":"b8826ba8-54f6-4f09-9b3a-addeef0c5bcd","name":"GDriveAPI","type":"server_js","source":"/*************************************************************************************\nDescription:\nUtility services for file/folder operations in google drive\n\nRevision History:\nVersion   Date          Author        Description\n1.0.0     2017/6/23     CAI Huaqin    initial version\n1.0.1     2017/7/19     CAI Huaqin    Fix a bug of key word: NULL -\u003e null in function \n                                      \"GDriveAPI_getFolderByUrl\"\n\n*************************************************************************************/\n\n/**\n  The ID of the specified folder or file.\n  examples: \n  fileType    ID                                             URL\n  folder      \"0B-f74PperqixS3h0LWxrNndLUVk\"                 \"https://drive.google.com/drive/folders/0B-f74PperqixS3h0LWxrNndLUVk\"\n  sheet       \"1azBHEngWXIhXnexz3QRnIwFYLNZunda9UuHbbjpQYG4\" \"https://docs.google.com/spreadsheets/d/1azBHEngWXIhXnexz3QRnIwFYLNZunda9UuHbbjpQYG4/edit#gid\u003d0\"\n  doc         \"1edieAgfwaywtL_IKbBMRiNsPE_IevrLX6_ar0cRUkCM\" \"https://docs.google.com/document/d/1edieAgfwaywtL_IKbBMRiNsPE_IevrLX6_ar0cRUkCM/edit\"    \n  ppt        \"1huRusHN7WYvwGJ5zfEesXd7he-pXEGxfxufA4gYcSxI\"  \"https://docs.google.com/presentation/d/1huRusHN7WYvwGJ5zfEesXd7he-pXEGxfxufA4gYcSxI/edit\"\n  @param {String}  url - The Url of the folder or file in google drive\n  @param {String}  type - The document type of the URL, value can be one of the below: \"sheet\", \"folder\", \"doc\", \"ppt\".\n  @return {String} id - the folder or file ID in google drive, otherwise, return \"NULL\"\n*/\nfunction GDriveAPI_getIdByUrl( url, type )\n{\n  var id \u003d null;\n  \n  if ( url !\u003d \"\" )\n  {\n     if ( type \u003d\u003d \"sheet\" || type \u003d\u003d \"doc\" || type \u003d\u003d \"ppt\" )\n     {\n        var keyStart \u003d \"/d/\";\n        var keyEnd \u003d \"/edit\";\n        var idxStart \u003d url.indexOf( keyStart ) + keyStart.length;\n        var idxEnd \u003d url.indexOf( keyEnd );\n        id \u003d url.slice( idxStart, idxEnd ); // Not including the idxEnd\n     }\n     else if ( type \u003d\u003d \"folder\" )\n     {\n       var keyStr \u003d \"/folders/\";\n       var idStartIdx \u003d url.indexOf( keyStr ) + keyStr.length;\n       id \u003d url.slice( idStartIdx ); // return the substring to the end of url, starting from the start index\n     }\n  }\n  \n  return id;\n}\n\n/**\n  The folder of a specified folder URL\n  @param {String}  folderUrl - The Url of the folder in google drive\n  @return {object} the folder object in google drive, if not found, return NULL.\n*/\nfunction GDriveAPI_getFolderByUrl( folderUrl )\n{\n  var folder \u003d null;\n  \n  if ( folderUrl !\u003d \"\" )\n  {\n    var folderId \u003d GDriveAPI_getIdByUrl( folderUrl, \"folder\" );\n    folder \u003d GDriveAPI_getFolderById( folderId );\n  }\n  \n  return folder;\n}\n\n/**\n  The folder of a specified folder ID\n  @param {String}  folderId - The ID of the folder in google drive\n  @return {object} the folder object in google drive, if not found, return null.\n*/\nfunction GDriveAPI_getFolderById( folderId )\n{\n  var folder \u003d null;\n  \n  if ( folderId !\u003d \"\" )\n  {\n    folder \u003d DriveApp.getFolderById( folderId );\n  }\n  \n  return folder;\n}\n\n/**\n  Check if the specified folder name exists in the current folder. Return null if not in the current folder, else return the folder object.\n  Note that the function check if the same folder name exist in the current folder, in google drive, there could be\n  several folders with the same name, we avoid to have this.\n  @param {object} curFoler the current folder object\n  @param {string} folderName the folder name to check inside the current folder\n  @return {object} return the object of the folder name to check, if not found, return null.\n*/\nfunction GDriveAPI_checkFolderExistInCurrentFolder( curFoler, folderName )\n{\n  var newFolder \u003d null;\n  \n  if ( curFoler !\u003d null )\n  {\n    // First, we check if the folder has already been created, retrieve all teh sub folders under the current\n    var subFolders \u003d curFoler.getFolders();\n    while(subFolders.hasNext())\n    {\n      // This folder has already been created. \n      // TODO: note that in google drive, there could be several same folder names under one foler, \n      // we can be sure if the foler with the same name under the foler is exactly the one we are going to create,\n      // the safe way is to compare the folder ID\n      // here we just compre the folder name.\n      var tmp \u003d subFolders.next();\n      if (folderName \u003d\u003d tmp.getName())\n      {\n        // This folder already created\n        newFolder \u003d tmp;\n        break;\n      }\n    }\n  }\n  \n  return newFolder;\n}\n\n/**\n  Check if the specified file name exists in the current folder. Return null if not in the current folder, else return the folder object.\n  Note that the function check if the same file name exist in the current folder, in google drive, there could be\n  several files with the same name, we avoid to have this.\n  @param {object} curFoler the current folder object\n  @param {string} fileName the file name to check inside the current folder\n  @return {object} return the object of the file name to check, if not found, return NULL.\n*/\nfunction GDriveAPI_checkFileExistInCurrentFolder( curFoler, fileName )\n{\n  var newFile \u003d null;\n  \n  if ( curFoler !\u003d null )\n  {\n    // First, we check if the folder has already been created, retrieve all teh sub folders under the current\n    var files \u003d curFoler.getFiles();\n    while(files.hasNext())\n    {\n      // This file has already been created. \n      // TODO: note that in google drive, there could be several same folder names under one foler, \n      // we can be sure if the foler with the same name under the foler is exactly the one we are going to create,\n      // the safe way is to compare the folder ID\n      // here we just compre the folder name.\n      var tmp \u003d files.next();\n      if (fileName \u003d\u003d tmp.getName())\n      {\n        // This file already created\n        newFile \u003d tmp;\n        break;\n      }\n    }\n  }\n  \n  return newFile;\n}\n\n/**\n  Create a sub folder inside the specified folder\n  Note that in google drive, there could be several folders with the same name, we avoid to have this.\n  @param {object} parentFolder the folder object to hold the new folder\n  @param {string} newFolderName the folder name to be created inside the parent folder\n  @return {object} return the object of the folder name to be created, if not found, return NULL.\n                   Note that the function will check if the folder name already there.\n*/\nfunction GDriveAPI_createSubFolder( parentFolder, newFolderName )\n{\n  DebugAPI_debugLog(\" --createSubFolder_ \" );\n  DebugAPI_debugLog(\" under folder: \" + parentFolder+\" ,new folder name to create: \" + newFolderName );\n  \n  var newFolder \u003d GDriveAPI_checkFolderExistInCurrentFolder(parentFolder, newFolderName);\n  if ( newFolder \u003d\u003d null )\n  {\n    // Create a new folder in the specified folder if not created yet\n    newFolder \u003d parentFolder.createFolder(newFolderName);\n  }\n  else\n  {\n    DebugAPI_debugLog(\"The folder \\\"\"+newFolderName+\"\\\" already there!\");\n  }\n  \n  DebugAPI_debugLog(\" new folder: \" + newFolder );\n  DebugAPI_debugLog(\" createSubFolder_ --\" );\n\n  return newFolder;\n}\n\n/**\n  Create a new spreadsheet from the template URL, if the spreadsheet with the same exist, it will\n  return the existing one, but not create a new one. Note that the newly created spreadsheet is\n  opened automatically.\n  @param {string} url - the URL of the template\n  @param {object} destFolder - the destination foler object of the newly created spreadsheet\n  @param {string} newSsName - the spreadsheet name of the newly created spreadsheet\n  @return {object} return the new spreadsheet, otherwise null, the new spreadsheet is opened after this API.\n*/\nfunction GDriveAPI_createNewSpreadSheetFromURL( url, destFolder, newSsName )\n{\n  var newSs \u003d null;\n  \n  DebugAPI_debugLog(\" --createNewSpreadSheetFromURL \" );\n  DebugAPI_debugLog(\" url to create from: \"+url );\n\n  if ( url !\u003d \"\" \u0026\u0026 url !\u003d null )\n  {\n    // Open the template Spreadsheet\n    var ssTemplate \u003d SpreadsheetApp.openByUrl( url );\n    var ssIdTemplate \u003d ssTemplate.getId();\n    newSs \u003d GDriveAPI_checkFileExistInCurrentFolder(destFolder, newSsName);\n    if ( newSs \u003d\u003d null ) // Create the spreadsheet only when it doesn\u0027t exist\n    {\n      newSs \u003d DriveApp.getFileById(ssIdTemplate).makeCopy(newSsName, destFolder);\n    }\n    else\n    {\n       DebugAPI_debugLog(\"The spreadsheet \\\"\"+newSsName+\"\\\" already in folder: \\\"\"+destFolder+\"\\\"\");\n    }\n    \n    // If you want to operate in this sheet, you shall open the sheet\n    {\n      var newSsUrl \u003d newSs.getUrl();\n      newSs \u003d SpreadsheetApp.openByUrl(newSsUrl); // IMPORTANT: Open this sheet for later operation\n    }\n  }\n\n  DebugAPI_debugLog(\" newSs: \"+newSs );\n  DebugAPI_debugLog(\" createNewSpreadSheetFromURL --\" );\n  \n  return newSs;\n}\n\n\n"},{"id":"d69b9854-e772-43e9-9561-3899a1b7e0c7","name":"GSheetAPI","type":"server_js","source":"/*************************************************************************************\nDescription:\nUtility services for spreadsheet operations in google drive\n\nRevision History:\nVersion   Date          Author        Description\n1.0.0     2017/6/23     CAI Huaqin    initial version\n1.1.0     2017/7/19     CAI Huaqin    add new function: GSheetAPI_inputBox \n1.1.1     2017/7/21     CAI Huaqin    add new function: GSheetAPI_messageBox, \n                                      GSheetAPI_decisionBox\n1.1.2     2017/9/20     CAI Huaqin    add new function: GSheetAPI_naviCmd\n1.1.3     2018/1/11     CAI Huaqin    add new function: GSheetAPI_hideEmptyRowsCols                                      \n*************************************************************************************/\n\n/**\n  New sheet from template within the same spreadsheet\n  @param {string} newShName: the new sheet name to be created\n  @param {string} tempShName: the template sheet name to copy from\n  @return {sheet} the new sheet and this sheet is always of index \"0\" in the spreadsheet\n*/\nfunction GSheetAPI_newSheetFromTemplate( ss, newShName, tempShName )\n{\n  var newSheet \u003d null;\n  \n  if ( ss !\u003d null )\n  {\n    // First, check if the sheet with the specified year exists or not, if not, create a new sheet from the template\n    var allSheets \u003d ss.getSheets();\n    var numOfSheets \u003d allSheets.length;\n    for ( var i \u003d 0; i \u003c numOfSheets; i++ )\n    {\n      var sheetName \u003d allSheets[i].getName();\n      if ( newShName \u003d\u003d sheetName ) // The sheet with the year name exist\n      {\n        newSheet \u003d allSheets[i];\n        break;\n      }\n    }\n    \n    // If the sheet with name year doesn\u0027t exist, we create a new one from the \"template\" sheet\n    if ( newSheet \u003d\u003d null )\n    {\n      // insert the sheet with the name year in the first index\n      var tempSheet \u003d ss.getSheetByName( tempShName );\n      newSheet \u003d tempSheet.copyTo( ss ).setName( String(newShName) );\n      \n      // move to the 1st position for incoming operations, it will reduce the num of loop\n      ss.setActiveSheet( newSheet );\n      ss.moveActiveSheet( 0 );\n    }\n  }\n  \n  return newSheet;\n}\n\n/**\n  New input box waiting for the user input. Note that the API can only be used within bounded script\n  @param {string} promptText: the prompt text for the input\n  @return {string} the input text if press OK otherwise, return \"\"\n*/\nfunction GSheetAPI_inputBox( promptText )\n{\n  var ret \u003d \"\";\n  var ui \u003d SpreadsheetApp.getUi();\n  var response \u003d ui.prompt( promptText, ui.ButtonSet.OK_CANCEL );\n  if (response.getSelectedButton() \u003d\u003d ui.Button.OK) \n  {\n      ret \u003d response.getResponseText();\n  }\n  \n  return ret;\n}\n\n/**\n  New Message box for information. Note that the API can only be used within bounded script\n  @param {string} promptText: the prompt text for the message\n  @return {string} \"ok\" if press OK otherwise, return \"\"\n*/\nfunction GSheetAPI_messageBox( promptText )\n{\n  var ret \u003d \"ok\";\n  var ui \u003d SpreadsheetApp.getUi();\n  ui.alert( promptText );\n  \n  return ret;\n}\n\n/**\n  New Message box for information. Note that the API can only be used within bounded script\n  @param {string} promptText: the prompt text for the message\n  @return {string} \"Yes\", \"No\" if press OK otherwise, return \"No\"\n*/\nfunction GSheetAPI_decisionBox( promptText )\n{\n  var ret \u003d \"No\";\n  var ui \u003d SpreadsheetApp.getUi();\n  var response \u003d ui.alert( promptText, ui.ButtonSet.YES_NO );\n  if (response \u003d\u003d ui.Button.YES) \n  {\n    ret \u003d \"Yes\";\n  }\n  \n  return ret;\n}\n\n/**\n  Navigation APIs, example code:\n\n var C_OPERATION_RANGES_EXT \u003d [\n    // Operation range(1 row), current range(1 cell),\n    [\"MemberListRangeAcquired\", \"MemberCurrentAcquired\"],\n  ];\n\n  var sh \u003d SpreadsheetApp.getActiveSheet();\n  Lib.GSheetAPI_naviCmd(\"goCurrent\", C_OPERATION_RANGES_EXT, sh);\n  \n  @param {string} cmd - one of \"goCurrent\", \"showPast\", \"hidePast\"\n  @param {array} opRangeList - the 2D array of the operation range list for the spreadsheet, \n                               each element is composed of two items: \n                               named range of the range which is either one row or one column,\n                               reference value range as 1 single cell.\n  @param {sheet} sh - the sheet the operation is currently working on\n  @return {number} \"0\" if success, otherwise failed\n*/\nfunction GSheetAPI_naviCmd( cmd, opRangeList, sh )\n{\n  var ret \u003d -1;\n\n  // Continue only the operation range is within the current sheet\n  if ( sh !\u003d null \u0026\u0026 opRangeList !\u003d null )\n  {\n    // Get the opRange and reference value\n    var elementIdx \u003d -1;\n    var numOfopRanges \u003d opRangeList.length;\n    var shName \u003d sh.getName();\n    var ss \u003d sh.getParent();\n    var opRangeValues \u003d [];  // 2D array\n    var refCurValue \u003d \"\";\n    \n    // Try to find the operation range and reference value\n    for ( var i \u003d 0; i \u003c numOfopRanges; i++ )\n    {\n      var opRangeName \u003d opRangeList[i][0];\n      var refRangeName \u003d opRangeList[i][1];\n      \n      // Get the operation range of each element\n      var opRange \u003d ss.getRangeByName( opRangeName );\n      var refRange \u003d ss.getRangeByName( refRangeName );\n      if ( (opRange !\u003d null) \u0026\u0026 \n           (refRange !\u003d null) \u0026\u0026 \n           (opRange.getSheet().getName() \u003d\u003d shName) )\n      {\n        elementIdx \u003d i;\n        refCurValue \u003d String(refRange.getValue()); // Only 1 cell, transform to String type\n        opRangeValues \u003d opRange.getValues();\n        break;\n      }\n    }\n    \n    // We found the operation range and current reference value\n    if ( elementIdx !\u003d -1 )\n    {\n      // Check if this is a row range or a column range\n      var startIdx \u003d -1, numofIdx \u003d 0;\n      \n      // Range with 1 row\n      if ( opRangeValues.length \u003d\u003d 1 )\n      {\n         startIdx \u003d opRange.getColumn();\n         numofIdx \u003d opRange.getNumColumns();  \n         \n         for ( var i \u003d 0; i \u003c numofIdx; i++ )\n         {\n            var value \u003d opRangeValues[0][i];\n            if ( value \u003d\u003d refCurValue )\n            {\n              // Activate the current cell, note that range index starts from \"1\"\n              opRange.getCell(1, i+1).activate();\n              if ( cmd \u003d\u003d \"hidePast\" )\n              {\n                // Column index starts from \"1\", the past array index is exactly the number of past columns\n                sh.hideColumns( startIdx, i ); \n              }\n              else if ( cmd \u003d\u003d \"showPast\" )\n              {\n                sh.showColumns( startIdx, i ); \n              }\n              ret \u003d 0;\n              break;\n            }\n         }\n      }\n      // Range with 1 column\n      else if ( opRangeValues[0].length \u003d\u003d 1 ) \n      {\n         startIdx \u003d opRange.getRow();\n         numofIdx \u003d opRange.getNumRows();\n         \n         for ( var i \u003d 0; i \u003c numofIdx; i++ )\n         {\n           var value \u003d String(opRangeValues[i][0]);\n           if ( value \u003d\u003d refCurValue )\n           {\n             // Activate the current cell, note that range index starts from \"1\"-\n             opRange.getCell(i+1, 1).activate();\n             if ( cmd \u003d\u003d \"hidePast\" )\n             {\n               // Row index starts from \"1\", the past array index is exactly the number of past columns\n               sh.hideRows( startIdx, i ); \n             }\n             else if ( cmd \u003d\u003d \"showPast\" )\n             {\n               sh.showRows( startIdx, i ); \n             }\n             ret \u003d 0;\n             break;\n           }\n         }\n      }\n    }\n  }\n  \n  return ret;\n}\n\n/**\n  Hide or show the rows and/or columns in the sheet specified\n  @param {sheet} sh - the sheet the operations are to be applied\n  @param {boolean} bHideRows - if hide the rows, by default, true\n  @param {boolean} bHideCols - if hide the columns, by default, true\n  @return {Number} always \"0\".\n*/\nfunction GSheetAPI_hideEmptyRowsCols( sh, bHideRows, bHideCols )\n{\n  if ( bHideRows \u003d\u003d null )\n  {\n    bHideRows \u003d true;\n  }\n  \n  if ( bHideCols \u003d\u003d null )\n  {\n    bHideCols \u003d true;\n  }\n  \n  if ( sh !\u003d null )\n  {\n    var rows \u003d sh.getMaxRows();\n    var cols \u003d sh.getMaxColumns();\n    var sheetRange \u003d sh.getRange(1, 1, rows, cols);\n    var sheetValues \u003d sheetRange.getValues();\n       \n    if ( bHideRows )\n    {\n      var emptyNum               \u003d 0;\n      var emptyRowStartIdx       \u003d -1; // empty row start index\n      \n      for ( var i \u003d 0; i \u003c rows; i++ )\n      {\n        var bRowEmpty              \u003d true;\n        for ( var j \u003d 0; j \u003c cols; j++ )\n        {\n          if ( sheetValues[i][j] !\u003d \"\" ) // if any element in the row is non empty, it shall be skipped\n          {\n            bRowEmpty \u003d false; \n            break;\n          }\n        }\n        \n        // if the bulk start row is not -1, then, the bulk row\n        if ( bRowEmpty ) // all elements in the row are empty\n        {\n          emptyNum++;\n          if ( emptyNum \u003d\u003d 1 ) // write down the start index\n          {\n            emptyRowStartIdx \u003d i+1; // range index starts from 1.\n          }\n        }\n        \n        // if reach the next non empty row or reach the end of the whole sheet range\n        if ( !bRowEmpty || (i \u003d\u003d rows-1) )\n        {\n          // the current row is not empty, check if there are continous rows before this row\n          if ( emptyNum \u003e 0 )//\u0026\u0026 emptyRowStartIdx \u003e 0 )\n          {\n             // hide muliple rows at a time, more efficient\n             sh.hideRows(emptyRowStartIdx, emptyNum);\n             emptyNum \u003d 0;\n             emptyRowStartIdx \u003d -1;\n          }\n        }\n      }\n    }\n    else\n    {\n      sh.unhideRow(sheetRange);\n    }\n    \n    if ( bHideCols )\n    {\n      var emptyNum               \u003d 0;\n      var emptyColStartIdx       \u003d -1; // empty column start index\n    \n      for ( var j \u003d 0; j \u003c cols; j++ )\n      {\n        var bColEmpty \u003d true;\n        for ( var i \u003d 0; i \u003c rows; i++ )\n        {\n          if ( sheetValues[i][j] !\u003d \"\" ) // if any element in the column is non empty, it shall be skipped\n          {\n            bColEmpty \u003d false;\n            break;\n          }\n        }\n        \n        // if the bulk start col is not -1, then, the bulk row\n        if ( bColEmpty ) // all elements in the row are empty\n        {\n          emptyNum++;\n          if ( emptyNum \u003d\u003d 1 ) // write down the start index\n          {\n            emptyColStartIdx \u003d j+1; // range index starts from 1.\n          }\n        }\n        \n        // if reach the next non empty cols or reach the end of the whole sheet range\n        if ( !bColEmpty || (j \u003d\u003d cols-1) )\n        {\n          // the current col is not empty, check if there are continous columns before this column\n          if ( emptyNum \u003e 0 )\n          {\n             // hide muliple rows at a time, more efficient\n             sh.hideColumns(emptyColStartIdx, emptyNum);\n             emptyNum \u003d 0;\n             emptyColStartIdx \u003d -1;\n          }\n        }\n      }\n    }\n    else\n    {\n      sh.unhideColumn(sheetRange);      \n    }\n  }\n  \n  return 0;\n}\n\n\n\n"},{"id":"d2290ceb-d7c3-4591-b427-0f3e23a9951c","name":"DebugAPI","type":"server_js","source":"/*************************************************************************************\n$Description Of This Module:\n\nUtility services for debugging\n\n$Revision History:\nVersion   Date          Author        Description            Location\n1.0.0     2016/12/13    CAI Huaqin    initial version\n2.0.0     2016/12/13    CAI Huaqin    hide local variables\n2.0.1     2017/01/18    CAI Huaqin    1.split the log enable feature into two APIs, users\n                                      can enable/disable console log and debug log separately\n                                      2.remove the API \"logEnable\" and \"consoleLog\"\n                                      3.add timing profile API\n                                      4.catetorize the logs\n2.0.2    2017/06/24     CAI Huaqin    Move scripts to new library \"Lib\", add prefix \"DebugAPI_ for\n                                      all APIs\n\n*************************************************************************************/\n\nvar gDebug_ \u003d false;\nvar gCDebug_ \u003d false;\nvar gTiming_ \u003d false;\n\n/**\n  Enable/Disable the debug feature\n  @param {boolean} bConsoleEnable Enable/disable the console log\n  @return {void}\n*/\nfunction DebugAPI_consolelogEnable( bConsoleEnable )\n{\n  gCDebug_ \u003d bConsoleEnable;\n}\n\n/**\n  Enable/Disable the debug feature\n  @param {boolean} bDebugEnable Enable/disable the debug log\n  @return {void}\n*/\nfunction DebugAPI_debuglogEnable( bDebugEnable )\n{\n  gDebug_ \u003d bDebugEnable;\n}\n\n/**\n  Enable/Disable the timing debug feature\n  @param {boolean} bTimingEnable Enable/disable the timing log\n  @return {void}\n*/\nfunction DebugAPI_timingLogEnable( bTimingEnable )\n{\n  gTiming_ \u003d bTimingEnable;\n}\n\n/**\n * Print debug log into the logs. Note that this debug API only supports 1 parameter with the string\n *\n * @param {string} str string to be logged, variables can be concated to constant strings.\n * @param {string} [optional] logSeverity: debug, info, warning, error, if omitted, it\u0027s \"debug\n * @return {void}\n */\nfunction DebugAPI_debugLog( str, logSeverity )\n{\n  if ( gDebug_ \u003d\u003d true )\n  {\n    if ( logSeverity \u003d\u003d \"info\" )\n    {\n      Logger.log( \"[INFO] \"+str );\n    }\n    else if ( logSeverity \u003d\u003d \"warning\" )\n    {\n      Logger.log( \"[WARN] \"+str );\n    }\n    else if ( logSeverity \u003d\u003d \"error\" )\n    {\n      Logger.log( \"[ERR] \"+str );\n    }\n    else\n    {\n      Logger.log( \"[DEBUG] \"+str );\n    }\n  }\n  \n  if ( gCDebug_ \u003d\u003d true )\n  {\n    if ( logSeverity \u003d\u003d \"info\" )\n    {\n      console.info( str );\n    }\n    else if ( logSeverity \u003d\u003d \"warning\" )\n    {\n      console.warn( str );\n    }\n    else if ( logSeverity \u003d\u003d \"error\" )\n    {\n      console.error( str );\n    }\n    else\n    {\n      console.log( str );\n    }\n  }\n}\n\n/**\n * start the measure of the timing\n *\n * @param {string} str string to be logged, optional\n * @return {void}\n */\nfunction DebugAPI_timingStart( str )\n{\n  if ( gTiming_ )\n  {\n    if ( gDebug_ )\n    {\n      Logger.log( \"[TIME START] \"+str );\n    }\n    \n    if ( gCDebug_ )\n    {\n      console.time( str );\n    }\n  }\n}\n\n/**\n * stop the measure of the timing\n *\n * @param {string} str string to be logged, optional\n * @return {void}\n */\nfunction DebugAPI_timingStop( str )\n{\n  if ( gTiming_ )\n  {\n    if ( gDebug_ )\n    {\n      Logger.log( \"[TIME END] \"+str );\n    }\n    \n    if ( gCDebug_ )\n    {\n      if ( str \u003d\u003d undefined ) str \u003d \"\";\n      console.timeEnd( str );\n    }\n  }\n}\n"},{"id":"f43ddd7c-63a2-4803-8010-133c6a94e367","name":"UtilityAPI","type":"server_js","source":"/*************************************************************************************\n$Description Of This Module:\n\nUtility services for generic operations\n\n$Revision History:\nVersion   Date          Author        Description            Location\n1.0.0     2018/02/09    CAI Huaqin    initial version, add sorting for 2D arrays\n\n*************************************************************************************/\n\n/**\n  Sort the 2D array by specified column index, either acending or decending order\n  the sort column is assumed as numbers\n  @param {array} array2D - 2D array to be sorted\n  @param {number} sortByColIdx - the index of the array column, starting from 0\n  @param {boolean} bAsending - indicate if asending order or desending order when sorting\n                   by default, asending order is assumed.\n  @return {array} the sorted 2D array\n*/\nfunction UtilityAPI_SortArray( array2D, sortByColIdx, bAsending )\n{\n  if ( bAsending \u003d\u003d \"\" )\n  {\n    bAsending \u003d true;\n  }\n  \n  if ( sortByColIdx \u003c 0 )\n  {\n    sortByColIdx \u003d 0;\n  }\n  \n  if ( Array.isArray(array2D) )\n  {\n    // If 2D array, \n    if ( Array.isArray(array2D[0]) )\n    {\n      array2D.sort( function(x,y) {\n        // NOT case sensitive\n        var xp \u003d x[sortByColIdx];//.toLowerCase();\n        var yp \u003d y[sortByColIdx];//.toLowerCase();\n        \n        if ( bAsending )\n        {\n          return (xp \u003d\u003d yp) ? (0) : (xp \u003c yp) ? (-1) : (1);\n        }\n        else\n        {\n          return (xp \u003d\u003d yp) ? (0) : (xp \u003c yp) ? (1) : (-1);\n        }\n      });\n    }    \n    else // 1D array\n    {\n      array2D.sort( function(x,y) {\n        // NOT case sensitive\n        var xp \u003d x;//.toLowerCase();\n        var yp \u003d y;//.toLowerCase();\n        \n        if ( bAsending )\n        {\n          return (xp \u003d\u003d yp) ? (0) : (xp \u003c yp) ? (-1) : (1);\n        }\n        else\n        {\n          return (xp \u003d\u003d yp) ? (0) : (xp \u003c yp) ? (1) : (-1);\n        }\n      });      \n    }\n  }\n  \n  return array2D;\n}\n\n/**\n  UtilityAPI_COLUMN_TO_LETTER\n \n  @param {column} column index.\n  @return the letter representing the column.\n  @customfunction\n*/\nfunction UtilityAPI_COLUMN_TO_LETTER( column )\n{\n  var temp, letter \u003d \u0027\u0027;\n  while (column \u003e 0)\n  {\n    temp \u003d (column - 1) % 26;\n    letter \u003d String.fromCharCode(temp + 65) + letter;\n    column \u003d (column - temp - 1) / 26;\n  }\n  return letter;\n}\n\n/**\n  UtilityAPI_COLUMN_TO_LETTER\n \n  @param {column} column index.\n  @return the letter representing the column.\n  @customfunction\n*/\n//function letterToColumn(letter)\n//{\n//  var column \u003d 0, length \u003d letter.length;\n//  for (var i \u003d 0; i \u003c length; i++)\n//  {\n//    column +\u003d (letter.charCodeAt(i) - 64) * Math.pow(26, length - i - 1);\n//  }\n//  return column;\n//}"},{"id":"594d238f-861e-4460-af21-8ac48e3ec343","name":"2DArray","type":"server_js","source":"// The scripts is from the URL: https://sites.google.com/site/scriptsexamples/custom-methods/2d-arrays-library\n\n/**\n * Returns only the unique rows in the source array, discarding duplicates. \n * The rows are returned according to the order in which they first appear in the source array.\n *\n * @param  {Object[][]} data a JavaScript 2d array\n * @param  {int} optColumnIndex the index of the column used to get unique values from a specific column\n * @param  {boolean} onlyReturnSelectedColumn a boolean, true to return only the values from optColumnIndex and no other column, false otherwise\n * @return {Object[][]} the unique rows in the source array, discarding duplicates. \n */\nfunction UtilityAPI_2DArrayUnique(data, optColumnIndex, onlyReturnSelectedColumn) {\n  if (data.length \u003e 0) {\n    var o \u003d {},\n      i, l \u003d data.length,\n      r \u003d [];\n    if (typeof optColumnIndex \u003d\u003d \"number\" \u0026\u0026 optColumnIndex \u003c data[0].length) {\n      if(onlyReturnSelectedColumn) {\n        for (i \u003d 0; i \u003c l; i +\u003d 1) o[data[i][optColumnIndex]] \u003d data[i][optColumnIndex];\n      }\n      else {\n        for (i \u003d 0; i \u003c l; i +\u003d 1) o[data[i][optColumnIndex]] \u003d data[i];\n      }\n      for (i in o) {\n        if (o[i] !\u003d \u0027\u0027) r.push(o[i]);\n      }\n    }\n    else if (optColumnIndex \u003d\u003d undefined) {\n      for (i \u003d 0; i \u003c l; i +\u003d 1) o[data[i]] \u003d data[i];\n      for (i in o) {\n        if (o[i] !\u003d \u0027\u0027) r.push(o[i]);\n      }\n    }\n    else {\n      throw \u0027optColumnIndex should be a column index\u0027;\n    }\n    return r;\n  }\n  else {\n    return data;\n  }\n}\n\n/**\n * Returns the number of rows that meet certain criteria within a JavaScript 2d array.\n *\n * @param  {Object[][]} data a JavaScript 2d array\n * @param  {String} criteria the criteria in the form of a character string by which the cells are counted\n * @param  {boolean} matchEntireContent a boolean, true to match the entire cell content, false otherwise\n * @return {int} the number of rows that meet the criteria. \n */\n\nfunction UtilityAPI_2DArrayCountif(data, criteria, matchEntireContent) {\n  if (data.length \u003e 0) {\n    var r \u003d 0;\n    var reg \u003d new RegExp(escape(criteria));\n    for (var i \u003d 0; i \u003c data.length; i++) {\n      if(matchEntireContent){\n        if (escape(data[i].toString()) \u003d\u003d escape(criteria)) {\n          r++;\n        }\n      }\n      else{\n        if (escape(data[i].toString()).search(reg) !\u003d -1) {\n          r++;\n        }\n      }\n    }\n    return r;\n  }\n  else {\n    return 0;\n  }\n}\n\n/**\n * Returns the first row in which a specified value can be found in a specific column.\n * returns -1 if the value to find never occurs.\n *\n * @param  {Object[][]} data a JavaScript 2d array\n * @param  {int} columnIndex the index of the column in which the value can be found or -1 to search accross all columns\n * @param  {String} value the value in the form of a character string\n * @return {int} the first row in which the value can be found. \n */\n\nfunction UtilityAPI_2DArrayIndexOf(data, columnIndex, value) {\n  if (data.length \u003e 0) {\n    if (typeof columnIndex !\u003d \"number\" || columnIndex \u003e data[0].length) {\n      throw \u0027Choose a valide column index\u0027;\n    }\n    var r \u003d -1;\n    var reg \u003d new RegExp(escape(value).toUpperCase());\n    for (var i \u003d 0; i \u003c data.length; i++) {\n      if (data[0][0] \u003d\u003d undefined) {\n        if (escape(data[i].toString()).toUpperCase().search(reg) !\u003d -1) return i;\n      }\n      else {\n        if (columnIndex \u003c 0 \u0026\u0026 escape(data[i].toString()).toUpperCase().search(reg) !\u003d -1 || columnIndex \u003e\u003d 0 \u0026\u0026 escape(data[i][columnIndex].toString()).toUpperCase().search(reg) !\u003d -1) return i;\n      }\n    }\n    return r;\n  }\n  else {\n    return data;\n  }\n}\n\n/**\n * Returns a filtered version of the given source array, where only certain rows have been included.\n *\n * @param  {Object[][]} data a JavaScript 2d array\n * @param  {int} columnIndex the index of the column in which the values can be found or -1 to search accross all columns\n * @param  {String[]} values the values in the form of an array of strings \n * @return {Object[][]} the filtered rows in the source array. \n */\n \n\nfunction UtilityAPI_2DArrayFilterByText(data, columnIndex, values) {\n  var value \u003d values;\n  if (data.length \u003e 0) {\n    if (typeof columnIndex !\u003d \"number\" || columnIndex \u003e data[0].length) {\n      throw \u0027Choose a valide column index\u0027;\n    }\n    var r \u003d [];\n    if (typeof value \u003d\u003d \u0027string\u0027) {\n      var reg \u003d new RegExp(escape(value).toUpperCase());\n      for (var i \u003d 0; i \u003c data.length; i++) {\n        if (columnIndex \u003c 0 \u0026\u0026 escape(data[i].toString()).toUpperCase().search(reg) !\u003d -1 || columnIndex \u003e\u003d 0 \u0026\u0026 escape(data[i][columnIndex].toString()).toUpperCase().search(reg) !\u003d -1) r.push(data[i]);\n      }\n      return r;\n    }\n    else {\n      for (var i \u003d 0; i \u003c data.length; i++) {\n        for (var j \u003d 0; j \u003c value.length; j++) {\n          var reg \u003d new RegExp(escape(value[j]).toUpperCase());\n          if (columnIndex \u003c 0 \u0026\u0026 escape(data[i].toString()).toUpperCase().search(reg) !\u003d -1 || columnIndex \u003e\u003d 0 \u0026\u0026 escape(data[i][columnIndex].toString()).toUpperCase().search(reg) !\u003d -1) {\n            r.push(data[i]);\n            j \u003d value.length;\n          }\n        }\n      }\n      return r;\n    }\n  }\n  else {\n    return data;\n  }\n}\n\n/**\n * Returns a filtered version of the given source array, where only certain rows have been included.\n *\n * @param  {Object[][]} data a JavaScript 2d array\n * @param  {int} columnIndex the index of the column in which the value can be found\n * @param  {Date} startDate the beginning of the time range\n * @param  {Date} endDate the end of the time range\n * @return {Object[][]} the filtered rows in the source array. \n */\n\nfunction UtilityAPI_2DArrayFilterByDate(data, columnIndex, startDate, endDate) {\n  if (data.length \u003e 0) {\n    if (typeof columnIndex !\u003d \"number\" || columnIndex \u003e data[0].length) {\n      throw \u0027Choose a valide column index\u0027;\n    }\n    if (startDate instanceof Date \u003d\u003d false || endDate instanceof Date \u003d\u003d false) {\n      throw \u0027startDate and endDate must be dates\u0027;\n    }\n    startDate \u003d startDate.getTime();\n    endDate \u003d endDate.getTime();\n    var r \u003d [];\n    for (var i \u003d 0; i \u003c data.length; i++) {\n      var date \u003d new Date(data[i][columnIndex]);\n      if (data[i][columnIndex] !\u003d \u0027\u0027 \u0026\u0026 isNaN(date.getYear())) {\n          throw \u0027The selected column should only contain Dates\u0027;\n      }\n      else if (data[i][columnIndex] !\u003d \u0027\u0027 \u0026\u0026 date.getTime() \u003e startDate \u0026\u0026 date.getTime() \u003c endDate) {\n          r.push(data[i]);\n      }\n    }\n    return r;\n  }\n  else {\n    return data;\n  }\n}\n\n/**\n * Returns a filtered version of the given source array, where only certain rows have been included.\n *\n * @param  {Object[][]} data a JavaScript 2d array\n * @param  {int} columnIndex the index of the column in which the value can be found\n * @param  {int} min the minimal value\n * @param  {int} max the maximal value\n * @return {Object[][]} the filtered rows in the source array. \n */\n\nfunction UtilityAPI_2DArrayFilterByRange(data, columnIndex, min, max) {\n  if (data.length \u003e 0) {\n\n    if (typeof columnIndex !\u003d \"number\" || columnIndex \u003e data[0].length) {\n      throw \u0027Choose a valide column index\u0027;\n    }\n    if (typeof min !\u003d \"number\" || typeof max !\u003d \"number\") {\n      throw \u0027min and max should be numbers\u0027;\n    }\n    var r \u003d [];\n    for (var i \u003d 0; i \u003c data.length; i++) {\n      var value \u003d data[i][columnIndex];\n      if (typeof value \u003d\u003d \"number\") {\n        if (value \u003e\u003d min \u0026\u0026 value \u003c\u003d max) {\n          r.push(data[i]);\n        }\n      }\n      else {\n        throw \u0027The selected column should only contain numbers\u0027;\n      }\n    }\n    return r;\n  }\n  else {\n    return data;\n  }\n}\n\n/**\n * Returns the rows in the given array, sorted according to the given key column.\n *\n * @param  {Object[][]} data a JavaScript 2d array\n * @param  {int} columnIndex the index of the column to sort\n * @param  {boolean}  ascOrDesc a boolean, true for ascending, false for descending\n * @return {Object[][]} the sorted array. \n */\n\nfunction UtilityAPI_2DArraySort(data, columnIndex, ascOrDesc) {\n  if (data.length \u003e 0) {\n    if (typeof columnIndex !\u003d \"number\" || columnIndex \u003e data[0].length) {\n      throw \u0027Choose a valide column index\u0027;\n    }\n    var r \u003d new Array();\n    var areDates \u003d true;\n    for (var i \u003d 0; i \u003c data.length; i++) {\n      if(data[i] !\u003d null){ // \n        var value \u003d data[i][columnIndex];\n        if(value \u0026\u0026 typeof(value)\u003d\u003d\u0027string\u0027) { \n          var date \u003d new Date(value);\n          if (isNaN(date.getYear())) areDates \u003d false;\n          else data[i][columnIndex] \u003d date;\n        }\n        r.push(data[i]);\n      }\n    }\n    return r.sort(function (a, b) {\n      if (ascOrDesc) return ((a[columnIndex] \u003c b[columnIndex]) ? -1 : ((a[columnIndex] \u003e b[columnIndex]) ? 1 : 0));\n      return ((a[columnIndex] \u003e b[columnIndex]) ? -1 : ((a[columnIndex] \u003c b[columnIndex]) ? 1 : 0));\n    });\n  }\n  else {\n    return data;\n  }\n}\n\n/**\n * Transposes the rows and columns in the given array.\n * \n * @param  {Object[][]} data a JavaScript 2d array\n * @return {Object[][]} the transposed array. \n */\n\nfunction UtilityAPI_2DArrayTranspose(data) {\n  if (data.length \u003e 0) {\n    var r \u003d [];\n    for (var i \u003d 0; i \u003c data[0].length; i++) {\n      var newRow \u003d [];\n      for (var j \u003d 0; j \u003c data.length; j++) {\n        newRow[j] \u003d data[j][i];\n      }\n      r[i] \u003d newRow;\n    }\n    return r;\n  }\n  else {\n    return data;\n  }\n}\n\n/**\n * Returns a filtered version of the given source array, where only certain rows have been included.\n *\n * @param  {Object[][]} data a JavaScript 2d array\n * @param  {int} columnIndex the index of the column in which the value can be found or -1 to search accross all columns\n * @param  {void} value the value in the form of a character string or number\n * @return {Object[][]} the filtered rows in the source array. \n */\n\nfunction UtilityAPI_2DArrayFilterByValue(data, columnIndex, value) {\n  if (data.length \u003e 0) {\n    var r \u003d [];\n    for (var i \u003d 0; i \u003c data.length; i++) {\n      Logger.log([\u0027filterByValue\u0027,data[i][columnIndex]]);\n      if (data[i][columnIndex]\u003d\u003dvalue) {\n        r.push(data[i]);\n      }\n    }\n    return r;\n  }\n}"},{"id":"b0087afc-1978-4c41-b047-97324811b459","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Hong_Kong\",\n  \"dependencies\": {\n  },\n  \"exceptionLogging\": \"STACKDRIVER\"\n}"}]}